StreamEntry::encode(this, a2);
  (*(void (__fastcall **)(ByteStream *, _DWORD))(*(_DWORD *)a2 + 0x18))(a2, *((_DWORD *)this + 0xB));
  (*(void (__fastcall **)(ByteStream *, _DWORD))(*(_DWORD *)a2 + 0x18))(a2, *((_DWORD *)this + 0xD));
  (*(void (__fastcall **)(ByteStream *, _DWORD))(*(_DWORD *)a2 + 0x18))(a2, *((_DWORD *)this + 0xC));
  v4 = *(_DWORD *)(*((_DWORD *)this + 0xE) + 8);
  (*(void (__fastcall **)(ByteStream *, int))(*(_DWORD *)a2 + 0x18))(a2, v4);
  if ( v4 >= 1 )
  {
    for ( i = 0; i != v4; ++i )
    {
      v6 = (_DWORD *)*((_DWORD *)this + 0xE);
      v7 = v6[2];
      if ( v7 <= i )
      {
        String::format(v11, "LogicArrayList.get out of bounds %d/%d", i, v7);
        Debugger::error((Debugger *)v11, v8);
        String::~String(v11);
      }
      DonationContainer::encode(*(DonationContainer **)(*v6 + 4 * i), a2);
    }
  }
  v9 = *(int (__fastcall **)(ByteStream *, int))(*(_DWORD *)a2 + 0x14);
  if ( !*((_DWORD *)this + 0xF) )
    return v9(a2, 0);
  v9(a2, 1);
  return (*(int (__fastcall **)(ByteStream *, _DWORD))(*(_DWORD *)a2 + 0x10))(a2, *((_DWORD *)this + 0xF));
}
